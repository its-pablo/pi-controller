# THIS FILE IS AUTOGENERATED AND WILL BE OVERWRITTEN, DO NOT EXPECT MODIFICATIONS TO REMAIN

from dummy_gpiozero import DigitalOutputDevice, DigitalInputDevice

# OUTPUT DEVICES:
VALVE = DigitalOutputDevice(17)
PUMP = DigitalOutputDevice(25)

# INPUT DEVICES:
DAYLIGHT = DigitalInputDevice(15)
TANK_FULL = DigitalInputDevice(21)
TANK_EMPTY = DigitalInputDevice(20)
WELL_EMPTY = DigitalInputDevice(16)
RAIN = DigitalInputDevice(12)

# Create device dictionary
devices = {}

# Generic status getter
def get_status ( device ):
	return device.is_active

# Dummy setter for demo mode
def dummy_set_status ( device, status ):
	device.is_active = status

# Generic status setter
def set_status ( device, status ):
	device.on() if status else device.off()
	return device.is_active

# OFF rule for VALVE, returns True if device should be OFF
def VALVE_off_rule ():
	if get_status( TANK_EMPTY ) and not get_status( RAIN ):
		return True

	return False

# ON rule for PUMP, returns True if device should be ON
def PUMP_on_rule ():

	if get_status( TANK_EMPTY ) and not get_status( WELL_EMPTY ):
		return True

	return False

# OFF rule for PUMP, returns True if device should be OFF
def PUMP_off_rule ():
	if get_status( WELL_EMPTY ) or get_status( TANK_FULL ) or not get_status( DAYLIGHT ):
		return True

	return False

# Generic stop function
def stop ( device_name ):
	return devices[ device_name ][ 2 ]( False )

# Generic start function
def start ( device_name ):
	# If we have an off rule and it is true, we should not start the device
	if devices[ device_name ][ 4 ] is not None and devices[ device_name ][ 4 ]():
		return False
	return devices[ device_name ][ 2 ]( True )

# Generic run function
def run ( device_name ):
	# Check if we should not be running
	if devices[ device_name ][ 4 ] is not None and devices[ device_name ][ 4 ]():
		devices[ device_name ][ 2 ]( False )
	# Check if we should be running
	elif devices[ device_name ][ 3 ] is not None and devices[ device_name ][ 3 ]():
		devices[ device_name ][ 2 ]( True )

# Initialize device dictionary
# DEVICE_NAME: DEVICE_TYPE[0], GETTER[1], SETTER[2], ON_RULE[3], OFF_RULE[4]
devices[ 'VALVE' ] = [ True, lambda: get_status( VALVE ), lambda status: set_status( VALVE, status ), None, VALVE_off_rule ]
devices[ 'PUMP' ] = [ True, lambda: get_status( PUMP ), lambda status: set_status( PUMP, status ), PUMP_on_rule, PUMP_off_rule ]
devices[ 'DAYLIGHT' ] = [ False, lambda: get_status( DAYLIGHT ), lambda status: dummy_set_status( DAYLIGHT, status ), None, None ]
devices[ 'TANK_FULL' ] = [ False, lambda: get_status( TANK_FULL ), lambda status: dummy_set_status( TANK_FULL, status ), None, None ]
devices[ 'TANK_EMPTY' ] = [ False, lambda: get_status( TANK_EMPTY ), lambda status: dummy_set_status( TANK_EMPTY, status ), None, None ]
devices[ 'WELL_EMPTY' ] = [ False, lambda: get_status( WELL_EMPTY ), lambda status: dummy_set_status( WELL_EMPTY, status ), None, None ]
devices[ 'RAIN' ] = [ False, lambda: get_status( RAIN ), lambda status: dummy_set_status( RAIN, status ), None, None ]
