import re
from pathlib import Path

BASE_PATH = Path( __file__ ).resolve().parent
CONFIG_FILE = BASE_PATH / 'device_config.txt'
MODULE_FILE = BASE_PATH / 'devices.py'

def gen_devices ( demo_mode=False, config_file_name=CONFIG_FILE, module_file_name=MODULE_FILE ):
    dev_pattern = re.compile( '^(\w*): (OUTPUT|INPUT) (\d*) (TRUE|FALSE) (TRUE|FALSE)$', re.MULTILINE )
    rules_pattern = re.compile( '^(\w*):$\s((?:^.+$\s)+)^$', re.MULTILINE )

    with open( config_file_name, 'r', encoding='utf-8' ) as file:
        contents = file.read()
        devs = dev_pattern.findall( contents )
        rules = rules_pattern.findall( contents )
        devs_dict = {}
        for dev in devs:
            devs_dict[ dev[ 0 ] ] = [ dev[ 1 ]  == 'OUTPUT', int( dev[ 2 ] ), dev[ 3 ]  == 'TRUE', dev[ 4 ]  == 'TRUE' ]
        rules_dict = {}
        for rule in rules:
            rules_dict[ rule[ 0 ] ] = rule[ 1 ].split( '\n' )[ :-1 ]
        for dev in devs_dict:
            if devs_dict[ dev ][ 0 ] and devs_dict[ dev ][ 2 ]:
                devs_dict[ dev ][ 2 ] = rules_dict[ dev + '_ON_RULES' ]
            else:
                devs_dict[ dev ][ 2 ] = []

            if devs_dict[ dev ][ 0 ] and devs_dict[ dev ][ 3 ]:
                devs_dict[ dev ][ 3 ] = rules_dict[ dev + '_OFF_RULES' ]
            else:
                devs_dict[ dev ][ 3 ] = []

        with open( module_file_name, 'w', encoding='utf-8' ) as script:
            def write_line ( str='', indent=0 ):
                script.write( '\t' * indent + str + '\n' )

            write_line( '# THIS FILE IS AUTOGENERATED AND WILL BE OVERWRITTEN, DO NOT EXPECT MODIFICATIONS TO REMAIN' )

            # Do imports
            write_line()
            if demo_mode:
                write_line( 'from dummy_gpiozero import DigitalOutputDevice, DigitalInputDevice' )
            else:
                write_line( 'from gpiozero import DigitalOutputDevice, DigitalInputDevice' )

            # Do outputs
            write_line()
            write_line( '# OUTPUT DEVICES:' )
            for dev in devs_dict:
                if devs_dict[ dev ][ 0 ]:
                    write_line( dev + ' = DigitalOutputDevice(' + str ( devs_dict[ dev ][ 1 ] ) + ')' )

            # Do inputs
            write_line()
            write_line( '# INPUT DEVICES:' )
            for dev in devs_dict:
                if not devs_dict[ dev ][ 0 ]:
                    write_line( dev + ' = DigitalInputDevice(' + str ( devs_dict[ dev ][ 1 ] ) + ')' )

            # Initialize dictionary
            write_line()
            write_line( '# Create device dictionary' )
            write_line( 'devices = {}' )

            # Create status getter
            write_line()
            write_line( '# Generic status getter' )
            write_line( 'def get_status ( device ):' )
            write_line( 'return device.is_active', 1 )

            # Create dummy setter for demo mode
            write_line()
            write_line( '# Dummy setter for demo mode' )
            write_line( 'def dummy_set_status ( device, status ):' )
            write_line( 'device.is_active = status', 1 )

            # Create status setter
            write_line()
            write_line( '# Generic status setter' )
            write_line( 'def set_status ( device, status ):' )
            write_line( 'device.on() if status else device.off()', 1 )
            write_line( 'return device.is_active', 1 )

            # Create rules
            for dev in devs_dict:
                # Has on rules
                if devs_dict[ dev ][ 0 ] and devs_dict[ dev ][ 2 ]:
                    write_line()
                    write_line( '# ON rule for ' + dev + ', returns True if device should be ON' )
                    write_line( 'def ' + dev + '_on_rule ():' )
                    for rule in devs_dict[ dev ][ 2 ]:
                        write_line()
                        rule_statement = rule.split()
                        rule_statement = [ token if token not in devs_dict.keys() else 'get_status( ' + token + ' )' for token in rule_statement ]
                        rule_statement = ' '.join( rule_statement )
                        write_line( 'if ' + rule_statement + ':', 1 )
                        write_line( 'return True', 2 )
                    write_line()
                    write_line( 'return False', 1 )

                # Has off rules
                if devs_dict[ dev ][ 0 ] and devs_dict[ dev ][ 3 ]:
                    write_line()
                    write_line( '# OFF rule for ' + dev + ', returns True if device should be OFF' )
                    write_line( 'def ' + dev + '_off_rule ():' )
                    for rule in devs_dict[ dev ][ 3 ]:
                        rule_statement = rule.split()
                        rule_statement = [ token if token not in devs_dict.keys() else 'get_status( ' + token + ' )' for token in rule_statement ]
                        rule_statement = ' '.join( rule_statement )
                        write_line( 'if ' + rule_statement + ':', 1 )
                        write_line( 'return True', 2 )
                        write_line()
                    write_line( 'return False', 1 )

            # Generic stop function
            write_line()
            write_line( '# Generic stop function' )
            write_line( 'def stop ( device_name ):' )
            write_line( 'return devices[ device_name ][ 2 ]( False )', 1 )

            # Generic start function
            write_line()
            write_line( '# Generic start function' )
            write_line( 'def start ( device_name ):' )
            write_line( '# If we have an off rule and it is true, we should not start the device', 1 )
            write_line( 'if devices[ device_name ][ 4 ] is not None and devices[ device_name ][ 4 ]():', 1 )
            write_line( 'return False', 2 )
            write_line( 'return devices[ device_name ][ 2 ]( True )', 1 )

            # Create generic run function
            write_line()
            write_line( '# Generic run function' )
            write_line( 'def run ( device_name ):' )
            write_line( '# Check if we should not be running', 1 )
            write_line( 'if devices[ device_name ][ 4 ] is not None and devices[ device_name ][ 4 ]():', 1 )
            write_line( 'devices[ device_name ][ 2 ]( False )', 2 )
            write_line( '# Check if we should be running', 1 )
            write_line( 'elif devices[ device_name ][ 3 ] is not None and devices[ device_name ][ 3 ]():', 1 )
            write_line( 'devices[ device_name ][ 2 ]( True )', 2 )
            
            # Initialize device dictionary
            write_line()
            write_line( '# Initialize device dictionary' )
            write_line( '# DEVICE_NAME: DEVICE_TYPE[0], GETTER[1], SETTER[2], ON_RULE[3], OFF_RULE[4]' )
            for dev in devs_dict:
                line = 'devices[ \'' + dev + '\' ] = [ ' + ( 'True' if devs_dict[ dev ][ 0 ] else 'False' )
                line = line + ', ' + 'lambda: get_status( ' + dev + ' )'
                setter_line = ''
                if devs_dict[ dev ][ 0 ]:
                    setter_line = 'lambda status: set_status( ' + dev + ', status )'
                elif demo_mode:
                    setter_line = 'lambda status: dummy_set_status( ' + dev + ', status )'
                else:
                    setter_line = 'None'
                line = line + ', ' + setter_line
                line = line + ', ' + ( dev + '_on_rule' if devs_dict[ dev ][ 0 ] and devs_dict[ dev ][ 2 ] else 'None' )
                line = line + ', ' + ( dev + '_off_rule' if devs_dict[ dev ][ 0 ] and devs_dict[ dev ][ 3 ] else 'None' ) + ' ]'
                write_line( line )
